import tensorflow as tf
import numpy as np
import os
import math


# In[2]:

train_dir = 'G:/machine learning/kaggle cat and dog/train/'


# In[3]:

def get_files(file_dir,ratio):#ratio验证集比例
    cats = []
    label_cats = []
    dogs = []
    label_dogs = []
    for file in os.listdir(file_dir):#顺序索引file_dir路径下的文件名字
        name = file.split(sep='.')#因为实际文件名字是用.来划分的
        if name[0] == 'cat':
            cats.append(file_dir + file)
            label_cats.append(0)
        else:
            dogs.append(file_dir + file)
            label_dogs.append(1)
    #print('there are %d cats\nthere are %d dogs' %(len(cats),len(dogs)))
    image_list = np.hstack((cats,dogs))
    label_list = np.hstack((label_cats,label_dogs))
    
    temp = np.array([image_list,label_list])
    temp = temp.transpose()
    np.random.shuffle(temp)#以行为单位进行乱序
    
    all_image_list = temp[:,0]
    all_label_list = temp[:,1]
    
    n_sample = len(all_label_list)
    n_val = math.ceil(n_sample*ratio)
    n_train = n_sample - n_val
    
    train_image = all_image_list[0:n_train]
    train_label = all_label_list[0:n_train]
    train_label = [int(float(i)) for i in train_label]
    val_image = all_image_list[n_train:-1]
    val_label = all_label_list[n_train:-1]
    val_label = [int(float(i)) for i in train_label]
    
    return train_image,train_label,val_image,val_label


# In[4]:

def get_batch(image,label,image_W,image_H,batch_size,capacity):
    image = tf.cast(image,tf.string)
    label = tf.cast(label,tf.int32)
    
    input_queue = tf.train.slice_input_producer([image,label],shuffle=False)
    label = input_queue[1]
    image_constents = tf.read_file(input_queue[0])
    image = tf.image.decode_jpeg(image_constents,channels=3)
    
    image = tf.image.resize_image_with_crop_or_pad(image,image_W,image_H)
    
    image = tf.image.per_image_standardization(image)
    
    image_batch,label_batch = tf.train.batch([image,label],
                                            batch_size=batch_size,
                                            num_threads=64,
                                            capacity=capacity)
    label_batch = tf.reshape(label_batch,[batch_size])
    image_batch = tf.cast(image_batch,tf.float32)
    
    return image_batch,label_batch


# In[5]:

import matplotlib.pyplot as plt

BATCH_SIZE = 2
CAPACITY = 64
IMG_W = 208
IMG_H = 208

ratio = 0.2
tra_images, tra_labels, val_images, val_labels = get_files(train_dir, ratio)
tra_image_batch, tra_label_batch = get_batch(tra_images, tra_labels, IMG_W, IMG_H, BATCH_SIZE, CAPACITY)
#
#
#
with tf.Session() as sess:
    i = 0
    coord = tf.train.Coordinator()
    threads = tf.train.start_queue_runners(coord=coord)
   
    try:
        while not coord.should_stop() and i<1:
            
            img, label = sess.run([tra_image_batch, tra_label_batch])
            
           # just test one batch
            for j in np.arange(BATCH_SIZE):
                print('label: %d' %label[j])
                plt.imshow(img[j,:,:,:])
                plt.show()
            i+=1
            
    except tf.errors.OutOfRangeError:
        print('done!')
    finally:
        coord.request_stop()
    coord.join(threads)


# In[5]:

def inference(images,batch_size,n_classes):
    with tf.variable_scope('conv1') as scope:
        weights = tf.get_variable('weights1', 
                                  shape = [3,3,3, 16],
                                  dtype = tf.float32, 
                                  initializer=tf.truncated_normal_initializer(stddev=0.1,dtype=tf.float32))
        biases = tf.get_variable('biases1', 
                                 shape=[16],
                                 dtype=tf.float32,
                                 initializer=tf.constant_initializer(0.1))
        conv = tf.nn.conv2d(images, weights, strides=[1,1,1,1], padding='SAME')
        pre_activation = tf.nn.bias_add(conv, biases)
        conv1 = tf.nn.relu(pre_activation, name= scope.name)
    
    #pool1 and norm1   
    with tf.variable_scope('pooling1_lrn') as scope:
        pool1 = tf.nn.max_pool(conv1, ksize=[1,3,3,1],strides=[1,2,2,1],
                               padding='SAME', name='pooling1')
        norm1 = tf.nn.lrn(pool1, depth_radius=4, bias=1.0, alpha=0.001/9.0,
                          beta=0.75,name='norm1')
    
    #conv2
    with tf.variable_scope('conv2') as scope:
        weights = tf.get_variable('weights2',
                                  shape=[3,3,16,16],
                                  dtype=tf.float32,
                                  initializer=tf.truncated_normal_initializer(stddev=0.1,dtype=tf.float32))
        biases = tf.get_variable('biases2',
                                 shape=[16], 
                                 dtype=tf.float32,
                                 initializer=tf.constant_initializer(0.1))
        conv = tf.nn.conv2d(norm1, weights, strides=[1,1,1,1],padding='SAME')
        pre_activation = tf.nn.bias_add(conv, biases)
        conv2 = tf.nn.relu(pre_activation, name='conv2')
    
    
    #pool2 and norm2
    with tf.variable_scope('pooling2_lrn') as scope:
        norm2 = tf.nn.lrn(conv2, depth_radius=4, bias=1.0, alpha=0.001/9.0,
                          beta=0.75,name='norm2')
        pool2 = tf.nn.max_pool(norm2, ksize=[1,3,3,1], strides=[1,1,1,1],
                               padding='SAME',name='pooling2')
    
    
    #local3
    with tf.variable_scope('local3') as scope:
        reshape = tf.reshape(pool2, shape=[batch_size, -1])
        dim = reshape.get_shape()[1].value
        weights = tf.get_variable('weights3',
                                  shape=[dim,128],
                                  dtype=tf.float32,
                                  initializer=tf.truncated_normal_initializer(stddev=0.005,dtype=tf.float32))
        biases = tf.get_variable('biases3',
                                 shape=[128],
                                 dtype=tf.float32, 
                                 initializer=tf.constant_initializer(0.1))
        local3 = tf.nn.relu(tf.matmul(reshape, weights) + biases, name=scope.name)    
    
    #local4
    with tf.variable_scope('local4') as scope:
        weights = tf.get_variable('weights4',
                                  shape=[128,128],
                                  dtype=tf.float32, 
                                  initializer=tf.truncated_normal_initializer(stddev=0.005,dtype=tf.float32))
        biases = tf.get_variable('biases4',
                                 shape=[128],
                                 dtype=tf.float32,
                                 initializer=tf.constant_initializer(0.1))
        local4 = tf.nn.relu(tf.matmul(local3, weights) + biases, name='local4')
     
        
    # softmax
    with tf.variable_scope('softmax_linear') as scope:
        weights = tf.get_variable('softmax_linear1',
                                  shape=[128, n_classes],
                                  dtype=tf.float32,
                                  initializer=tf.truncated_normal_initializer(stddev=0.005,dtype=tf.float32))
        biases = tf.get_variable('biases5', 
                                 shape=[n_classes],
                                 dtype=tf.float32, 
                                 initializer=tf.constant_initializer(0.1))
        softmax_linear = tf.add(tf.matmul(local4, weights), biases, name='softmax_linear2')
    
    return softmax_linear


# In[6]:

def losses(logits,labels):
    with tf.variable_scope('loss') as scope:
        cross_entropy = tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits,labels=labels,name='xentropy_per_example')
        loss = tf.reduce_mean(cross_entropy,name='loss')
        tf.summary.scalar(scope.name+'/loss',loss)
    return loss


# In[7]:

def trainning(loss,learning_rate):
    with tf.name_scope('optimizer'):
        optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate)
        global_step = tf.Variable(0,name='global_step',trainable=False)
        train_op = optimizer.minimize(loss,global_step=global_step)
    return train_op


# In[8]:

def evaluation(logits,labels):
    with tf.variable_scope('accuracy') as scope:
        correct = tf.nn.in_top_k(logits, labels, 1)
        correct = tf.cast(correct, tf.float16)
        accuracy = tf.reduce_mean(correct)
        tf.summary.scalar(scope.name+'/accuracy', accuracy)
    return accuracy


# In[ ]:

N_CLASSES = 2
IMG_W = 208  # resize the image, if the input image is too large, training will be very slow.
IMG_H = 208
RATIO = 0.2 # take 20% of dataset as validation data 
BATCH_SIZE = 16
CAPACITY = 500
MAX_STEP = 6000 # with current parameters, it is suggested to use MAX_STEP>10k
learning_rate = 0.0001

train_dir = 'G:/machine learning/kaggle cat and dog/train/'
logs_train_dir = 'model/cats and dogs/'
logs_val_dir = 'model/cats and dogs/'
    
train, train_label, val, val_label = get_files(train_dir, RATIO)
train_batch, train_label_batch = get_batch(train,
                                            train_label,
                                            IMG_W,
                                            IMG_H,
                                            BATCH_SIZE, 
                                            CAPACITY)
val_batch, val_label_batch = get_batch(val,
                                        val_label,
                                        IMG_W,
                                        IMG_H,
                                        BATCH_SIZE,
                                        CAPACITY)
    

    
x = tf.placeholder(tf.float32, shape=[BATCH_SIZE, IMG_W, IMG_H, 3])
y_ = tf.placeholder(tf.int32, shape=[BATCH_SIZE])
    
logits = inference(x, BATCH_SIZE, N_CLASSES)
loss = losses(logits, y_)  
acc = evaluation(logits, y_)
train_op = trainning(loss, learning_rate)

with tf.Session() as sess:
    saver = tf.train.Saver()
    sess.run(tf.global_variables_initializer())
    coord = tf.train.Coordinator()
    threads = tf.train.start_queue_runners(sess=sess,coord=coord)
    
    summary_op = tf.summary.merge_all()
    train_writer = tf.summary.FileWriter(logs_train_dir,sess.graph)
    val_writer = tf.summary.FileWriter(logs_val_dir,sess.graph)
    
    try:
        for step in np.arange(MAX_STEP):
            if coord.should_stop():
                break
            tra_images,tra_labels = sess.run([train_batch,train_label_batch])
            _,tra_loss,tra_acc = sess.run([train_op,loss,acc],feed_dict={x:tra_images, y_:tra_labels})
            
            if step % 50 == 0:
                print('Step %d, train loss = %.2f, train accuracy = %.2f%%' %(step, tra_loss, tra_acc*100.0))
                summary_str = sess.run(summary_op,feed_dict={x:tra_images, y_:tra_labels})
                train_writer.add_summary(summary_str, step)
                    
            if step % 200 == 0 or (step + 1) == MAX_STEP:
                val_images, val_labels = sess.run([val_batch, val_label_batch])
                val_loss, val_acc = sess.run([loss, acc], 
                                              feed_dict={x:val_images, y_:val_labels})
                print('**  Step %d, val loss = %.2f, val accuracy = %.2f%%  **' %(step, val_loss, val_acc*100.0))
                summary_str = sess.run(summary_op,feed_dict={x:val_images, y_:val_labels})
                val_writer.add_summary(summary_str, step)  
                                    
            if step % 2000 == 0 or (step + 1) == MAX_STEP:
                checkpoint_path = os.path.join(logs_train_dir, 'cats and dogs.ckpt')
                saver.save(sess, checkpoint_path, global_step=step)
                    
    except tf.errors.OutOfRangeError:
        print('Done training -- epoch limit reached')
    finally:
        coord.request_stop()
    coord.join(threads)
                    


# In[9]:

from PIL import Image
import matplotlib.pyplot as plt


# In[10]:

def get_one_image(train):
    n = len(train)
    ind = np.random.randint(0,n)
    img_dir = train[ind]
    
    image = Image.open(img_dir)
    plt.imshow(image)
    image = image.resize([208,208])
    image = np.array(image)
    return image


# In[28]:

def evaluate_one_image():
    train_dir = 'G:/machine learning/kaggle cat and dog/train/'
    train,train_label,_,__ = get_files(train_dir,0)
    image_array = get_one_image(train)
    
    with tf.Graph().as_default():
        BATCH_SIZE = 1
        N_CLASSES = 2
       
        image = tf.cast(image_array,tf.float32)
        image = tf.image.per_image_standardization(image)
        image = tf.reshape(image,[1,208,208,3])
        
        logit = inference(image,BATCH_SIZE,N_CLASSES)
        logit = tf.nn.softmax(logit)
        
        #x = tf.placeholder(tf.float32,shape=[208,208,3])
        
        logs_train_dir = 'model/cats and dogs/'
        
        saver = tf.train.Saver()
        
        with tf.Session() as sess:
            print("reading checkpoints...")
            ckpt = tf.train.get_checkpoint_state(logs_train_dir)
            if ckpt and ckpt.model_checkpoint_path:
                global_step = ckpt.model_checkpoint_path.split('/')[-1].split('-')[-1]
                saver.restore(sess,ckpt.model_checkpoint_path)
                print('loading success,global_step is %s' %global_step)
            else:
                print('no checkpoint file found')
                
            prediction = sess.run(logit)
            max_index = np.argmax(prediction)
            if max_index==0:
                print('This is a cat with possibility %.6f' %prediction[:, 0])
            else:
                print('This is a dog with possibility %.6f' %prediction[:, 1])


# In[30]:

evaluate_one_image()
